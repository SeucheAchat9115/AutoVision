[tox]
min_version = 4.0
env_list =
    py{311,312}-test
    py311-lint
    py311-type
    py311-security
    py311-integration
    coverage-report
isolated_build = true

[testenv]
package = wheel
wheel_build_env = .pkg
deps =
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-asyncio>=0.21.0
    pytest-xdist>=3.0.0
extras = all
commands = pytest {posargs}

[testenv:py{311,312}-test]
description = Run unit tests
commands =
    pytest tests/ -m "unit" --cov=autovision --cov-report=term-missing --cov-report=xml --cov-append {posargs}

[testenv:py311-lint]
description = Run linting checks
deps =
    ruff>=0.1.0
commands =
    ruff check .
    ruff format . --check

[testenv:py311-type]
description = Run type checking
deps =
    mypy>=1.0.0
    types-PyYAML
    types-requests
commands =
    mypy src/autovision tests

[testenv:py311-security]
description = Run security checks
deps =
    bandit>=1.7.0
    safety>=2.0.0
commands =
    bandit -r src/autovision
    safety check

[testenv:py311-integration]
description = Run integration tests
commands =
    pytest tests/ -m "integration" --cov=autovision --cov-report=term-missing {posargs}

[testenv:py311-slow]
description = Run slow tests
commands =
    pytest tests/ -m "slow" --cov=autovision --cov-report=term-missing {posargs}

[testenv:coverage-report]
description = Generate coverage report
deps = coverage[toml]
skip_install = true
commands =
    coverage combine
    coverage report
    coverage html

[testenv:docs]
description = Build documentation
deps =
    sphinx>=5.0.0
    sphinx-rtd-theme
    myst-parser
extras = all
commands =
    sphinx-build -W -b html docs docs/_build/html

[testenv:build]
description = Build package
deps =
    build
    twine
commands =
    python -m build
    twine check dist/*

[testenv:clean]
description = Clean up build artifacts
deps =
skip_install = true
commands =
    python -c "
    import shutil
    import os
    for pattern in ['.coverage*', 'htmlcov', '.pytest_cache', '.mypy_cache', '.ruff_cache', 'dist', 'build', '*.egg-info']:
        for root, dirs, files in os.walk('.'):
            for d in dirs[:]:
                if d.endswith(pattern.lstrip('.')):
                    shutil.rmtree(os.path.join(root, d), ignore_errors=True)
                    dirs.remove(d)
            for f in files:
                if f.startswith(pattern.lstrip('*')):
                    os.remove(os.path.join(root, f))
    "
