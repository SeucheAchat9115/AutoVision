[project]
name = "autovision"
version = "0.1.0"
description = "Automated video analysis and object detection for YouTube content"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "AutoVision Team", email = "team@autovision.dev" }
]
license = { text = "MIT" }
keywords = ["video-analysis", "object-detection", "youtube", "computer-vision", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Video",
]
dependencies = [
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "black>=23.0.0",
]
ml = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "transformers>=4.30.0",
    "opencv-python>=4.8.0",
    "pillow>=10.0.0",
    "numpy>=1.24.0",
]
youtube = [
    "yt-dlp>=2023.7.6",
    "ffmpeg-python>=0.2.0",
]
all = [
    "autovision[dev,ml,youtube]",
]

[project.scripts]
autovision = "autovision.cli:main"

[project.urls]
Homepage = "https://github.com/SeucheAchat9115/AutoVision"
Documentation = "https://github.com/SeucheAchat9115/AutoVision/docs"
Repository = "https://github.com/SeucheAchat9115/AutoVision"
"Bug Tracker" = "https://github.com/SeucheAchat9115/AutoVision/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/autovision"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "black>=23.0.0",
]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py311"
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PT004",   # fixture does not return anything, add leading underscore
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"scripts/**/*" = ["T201"]

[tool.ruff.lint.isort]
known-first-party = ["autovision"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "scripts.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Bandit configuration for security checks
[tool.bandit]
exclude_dirs = ["tests", "scripts", "docs"]
skips = ["B101", "B601"]
